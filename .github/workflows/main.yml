name: patch new FW version
on: workflow_dispatch
#  schedule:
#		 every day, check for a new version
#  	 - cron: '0 12 * * *'

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      status: ${{steps.run-step.outputs.status}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true
          cache: 'pip'
      - run: pip install -r requirements.txt
      - name: Download Old Version
        uses: Itsblue/download-release-assets-action@v4
        with:
          file: 'version.txt'
      - name: Check for New Version
        id: run-step
        run: 'echo status=$(python3 versioncheck.py ${{secrets.PD_ACCESS_TOKEN}} $(cat version.txt)) >> "$GITHUB_OUTPUT"'
  fw-patch:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.status != 'No content' && needs.version-check.outputs.status != 'Error'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true
          cache: 'pip'
      - run: pip install -r requirements.txt
      - run: mkdir -p static/ota_payload
      - name: Download and Patch Firmware
        run: 'python3 pdpatcher.py -t ${{secrets.PD_ACCESS_TOKEN}} -p ${{secrets.PD_PASSWORD}} -o static/ota_payload'
      - name: Package Firmware
        run: 'zip -r static/ota_payload.bin static/ota_payload'
      - name: Remove Old JSON Response
        run: 'rm -f static/update.json static/ota_payload'
      - name: Create JSON Response
        run: 'python3 genresp.py ${{needs.version-check.outputs.status}} > static/update.json'
      - name: Store New Version
        run: 'echo ${{needs.version-check.outputs.status}} > static/version.txt'
      - name: Publish Release
        uses: fnkr/github-action-ghr@v1.3
        env:
          GHR_PATH: static/
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
